spring.application.name=photo-management-service
server.port=8081

spring.data.mongodb.uri=mongodb+srv://rosicanikolova1402:rosica@inspocloud.jedwygp.mongodb.net/?retryWrites=true&w=majority&appName=inspocloud
#spring.data.mongodb.uri=mongodb+srv://rosicanikolova1402:9Rosica9@inspocloud.jedwygp.mongodb.net/?retryWrites=true&w=majority&appName=inspocloud
spring.data.mongodb.database=inspocloud

# RabbitMQ Configuration
spring.rabbitmq.host=localhost
#Docker
#spring.rabbitmq.host=${SPRING_RABBITMQ_HOST}
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest


# Additional RabbitMQ Configuration for Photo Upload Service
photo.upload.exchange=photo_upload_exchange
photo.upload.routing-key=photo_uploaded
photo.upload.queue=photo_upload_queue

# Custom Properties
photo.management.queue=photo_upload_queue

# Optional: Dead Letter Exchange and Queue Configuration (if interacting directly with DLQ)
#photo.management.dlx=dlx_exchange
#photo.management.dlq=photo_upload_dead_letter_queue

